# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

ifeq ($(origin CC), default)
  CC = clang
endif
ifeq ($(origin CXX), default)
  CXX = clang++
endif
ifeq ($(origin AR), default)
  AR = ar
endif
INCLUDES += -I../include/GLFW/include -I../include/ILog -I../include/glm -I. -IC:/VulkanSDK/1.2.198.1/Include -Iengine/utils -Iengine/core -Iengine/input -Iengine/math
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug)
TARGETDIR = ../bin/RunEngine/Debug
TARGET = $(TARGETDIR)/RunEngine.dll
OBJDIR = ../bin-int/RunEngine/Debug
DEFINES += -DGLFW_INCLUDE_VULKAN -DRN_EXPORT_DLL -DDEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O0 -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O0 -g -std=c++17
LIBS += ../bin/glfw/Debug/glfw.lib -lvulkan-1
LDDEPS += ../bin/glfw/Debug/glfw.lib
ALL_LDFLAGS += $(LDFLAGS) -LC:/VulkanSDK/1.2.198.1/Lib -L/usr/lib64 -m64 -shared -Wl,--out-implib="../bin/RunEngine/Debug/RunEngine.lib"

else ifeq ($(config),release)
TARGETDIR = ../bin/RunEngine/Release
TARGET = $(TARGETDIR)/RunEngine.dll
OBJDIR = ../bin-int/RunEngine/Release
DEFINES += -DGLFW_INCLUDE_VULKAN -DRN_EXPORT_DLL -DNDEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O3
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O3 -std=c++17
LIBS += ../bin/glfw/Release/glfw.lib -lvulkan-1
LDDEPS += ../bin/glfw/Release/glfw.lib
ALL_LDFLAGS += $(LDFLAGS) -LC:/VulkanSDK/1.2.198.1/Lib -L/usr/lib64 -m64 -shared -Wl,--out-implib="../bin/RunEngine/Release/RunEngine.lib"

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/Entity.o
GENERATED += $(OBJDIR)/ILog.o
GENERATED += $(OBJDIR)/Stb.o
GENERATED += $(OBJDIR)/Timer.o
GENERATED += $(OBJDIR)/VkContext.o
GENERATED += $(OBJDIR)/VkDebugMessenger.o
GENERATED += $(OBJDIR)/VkDevice.o
GENERATED += $(OBJDIR)/VkGraphicsPipeline.o
GENERATED += $(OBJDIR)/VkIndexBuffer.o
GENERATED += $(OBJDIR)/VkInstance.o
GENERATED += $(OBJDIR)/VkPhysicalDevice.o
GENERATED += $(OBJDIR)/VkRenderer.o
GENERATED += $(OBJDIR)/VkSurface.o
GENERATED += $(OBJDIR)/VkSwapChain.o
GENERATED += $(OBJDIR)/VkVertexBuffer.o
GENERATED += $(OBJDIR)/Window.o
GENERATED += $(OBJDIR)/glm.o
OBJECTS += $(OBJDIR)/Entity.o
OBJECTS += $(OBJDIR)/ILog.o
OBJECTS += $(OBJDIR)/Stb.o
OBJECTS += $(OBJDIR)/Timer.o
OBJECTS += $(OBJDIR)/VkContext.o
OBJECTS += $(OBJDIR)/VkDebugMessenger.o
OBJECTS += $(OBJDIR)/VkDevice.o
OBJECTS += $(OBJDIR)/VkGraphicsPipeline.o
OBJECTS += $(OBJDIR)/VkIndexBuffer.o
OBJECTS += $(OBJDIR)/VkInstance.o
OBJECTS += $(OBJDIR)/VkPhysicalDevice.o
OBJECTS += $(OBJDIR)/VkRenderer.o
OBJECTS += $(OBJDIR)/VkSurface.o
OBJECTS += $(OBJDIR)/VkSwapChain.o
OBJECTS += $(OBJDIR)/VkVertexBuffer.o
OBJECTS += $(OBJDIR)/Window.o
OBJECTS += $(OBJDIR)/glm.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking RunEngine
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning RunEngine
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) rmdir /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/ILog.o: ../include/ILog/ILog.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/glm.o: ../include/glm/glm/detail/glm.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Entity.o: engine/core/Entity.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VkContext.o: engine/core/VkContext.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VkDebugMessenger.o: engine/core/VkDebugMessenger.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VkDevice.o: engine/core/VkDevice.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VkGraphicsPipeline.o: engine/core/VkGraphicsPipeline.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VkIndexBuffer.o: engine/core/VkIndexBuffer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VkInstance.o: engine/core/VkInstance.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VkPhysicalDevice.o: engine/core/VkPhysicalDevice.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VkRenderer.o: engine/core/VkRenderer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VkSurface.o: engine/core/VkSurface.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VkSwapChain.o: engine/core/VkSwapChain.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/VkVertexBuffer.o: engine/core/VkVertexBuffer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Window.o: engine/core/Window.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Stb.o: engine/utils/Stb.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Timer.o: engine/utils/Timer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif